{"version":3,"sources":["../src/index.ts","../src/connection.ts","../src/errors.ts","../src/dialect.ts","../src/utils.ts","../src/driver.ts"],"sourcesContent":["export * from './connection.js'\nexport * from './dialect.js'\nexport * from './driver.js'\nexport * from './errors.js'\nexport type * from './types.js'\n","import {CompiledQuery, DatabaseConnection, QueryResult, TransactionSettings} from 'kysely'\nimport type {ReservedSql} from 'postgres'\nimport {PostgresJSDialectError} from './errors.js'\n\nexport class PostgresJSConnection implements DatabaseConnection {\n  #reservedConnection: ReservedSql\n\n  constructor(reservedConnection: ReservedSql) {\n    this.#reservedConnection = reservedConnection\n  }\n\n  async beginTransaction(settings: TransactionSettings): Promise<void> {\n    const {isolationLevel} = settings\n\n    const compiledQuery = CompiledQuery.raw(\n      isolationLevel ? `start transaction isolation level ${isolationLevel}` : 'begin',\n    )\n\n    await this.executeQuery(compiledQuery)\n  }\n\n  async commitTransaction(): Promise<void> {\n    await this.executeQuery(CompiledQuery.raw('commit'))\n  }\n\n  async executeQuery<R>(compiledQuery: CompiledQuery<unknown>): Promise<QueryResult<R>> {\n    const result = await this.#reservedConnection.unsafe<R[]>(\n      compiledQuery.sql,\n      compiledQuery.parameters.slice() as any,\n    )\n\n    const rows = Array.from(result.values())\n\n    if (['INSERT', 'UPDATE', 'DELETE'].includes(result.command)) {\n      const numAffectedRows = BigInt(result.count)\n\n      return {numAffectedRows, rows}\n    }\n\n    return {rows}\n  }\n\n  releaseConnection(): void {\n    this.#reservedConnection.release()\n\n    this.#reservedConnection = null!\n  }\n\n  async rollbackTransaction(): Promise<void> {\n    await this.executeQuery(CompiledQuery.raw('rollback'))\n  }\n\n  async *streamQuery<R>(\n    compiledQuery: CompiledQuery<unknown>,\n    chunkSize: number,\n  ): AsyncIterableIterator<QueryResult<R>> {\n    if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n      throw new PostgresJSDialectError('chunkSize must be a positive integer')\n    }\n\n    const cursor = this.#reservedConnection\n      .unsafe<R[]>(compiledQuery.sql, compiledQuery.parameters.slice() as any)\n      .cursor(chunkSize)\n\n    for await (const rows of cursor) {\n      yield {rows}\n    }\n  }\n}\n","export class PostgresJSDialectError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'PostgresJSDialectError'\n  }\n}\n","import {\n  PostgresAdapter,\n  PostgresIntrospector,\n  PostgresQueryCompiler,\n  type DatabaseIntrospector,\n  type Dialect,\n  type DialectAdapter,\n  type Driver,\n  type Kysely,\n  type QueryCompiler,\n} from 'kysely'\n\nimport {PostgresJSDriver} from './driver.js'\nimport type {PostgresJSDialectConfig} from './types.js'\nimport {freeze} from './utils.js'\n\nexport class PostgresJSDialect implements Dialect {\n  readonly #config: PostgresJSDialectConfig\n\n  constructor(config: PostgresJSDialectConfig) {\n    this.#config = freeze({...config})\n  }\n\n  createAdapter(): DialectAdapter {\n    return new PostgresAdapter()\n  }\n\n  createDriver(): Driver {\n    return new PostgresJSDriver(this.#config)\n  }\n\n  createIntrospector(db: Kysely<any>): DatabaseIntrospector {\n    return new PostgresIntrospector(db)\n  }\n\n  createQueryCompiler(): QueryCompiler {\n    return new PostgresQueryCompiler()\n  }\n}\n","export function freeze<T>(obj: T): Readonly<T> {\n  return Object.freeze(obj)\n}\n","import type {Driver, TransactionSettings} from 'kysely'\n\nimport {PostgresJSConnection} from './connection.js'\nimport type {PostgresJSDialectConfig} from './types.js'\nimport {freeze} from './utils.js'\n\nexport class PostgresJSDriver implements Driver {\n  readonly #config: PostgresJSDialectConfig\n\n  constructor(config: PostgresJSDialectConfig) {\n    this.#config = freeze({...config})\n  }\n\n  async init(): Promise<void> {\n    // noop\n  }\n\n  async acquireConnection(): Promise<PostgresJSConnection> {\n    const reservedConnection = await this.#config.postgres.reserve()\n\n    return new PostgresJSConnection(reservedConnection)\n  }\n\n  async beginTransaction(connection: PostgresJSConnection, settings: TransactionSettings): Promise<void> {\n    await connection.beginTransaction(settings)\n  }\n\n  async commitTransaction(connection: PostgresJSConnection): Promise<void> {\n    await connection.commitTransaction()\n  }\n\n  async rollbackTransaction(connection: PostgresJSConnection): Promise<void> {\n    await connection.rollbackTransaction()\n  }\n\n  async releaseConnection(connection: PostgresJSConnection): Promise<void> {\n    connection.releaseConnection()\n  }\n\n  async destroy(): Promise<void> {\n    await this.#config.postgres.end()\n  }\n}\n"],"mappings":"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","names":["import_kysely"]}